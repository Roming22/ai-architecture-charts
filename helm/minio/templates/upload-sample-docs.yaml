{{- if and .Values.sampleFileUpload .Values.sampleFileUpload.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    {{- include "minio.labels" . | nindent 4 }}
  name: upload-sample-docs-job
spec:
  selector: {}
  template:
    metadata:
      labels:
       {{- include "minio.labels" . | nindent 4 }}
    spec:
      containers:
        - args:
            - -ec
            - |-
              pip install minio;
              pip install requests;
              cat << 'EOF' | python3
              from minio import Minio
              import os
              from urllib.parse import urlparse
              import json
              import requests
              import tempfile

              host = os.getenv("host")
              port = os.getenv("port")

              minioClient = Minio(
                  f"{host}:{port}",
                  access_key=os.getenv("user"),
                  secret_key=os.getenv("password"),
                  secure=False
              )
              bucket = os.getenv("MINIO_BUCKET")
              print(f"creating {bucket} bucket")
              if minioClient.bucket_exists(bucket):
                print(f"bucket {bucket} exists")
              else:
                minioClient.make_bucket(bucket)
                print(f"bucket {bucket} created successfully")
              json_str = os.environ.get("URLS")
              print(json_str)

              urls = []
              if json_str:
                try:
                    urls = json.loads(json_str)
                    print("Parsed urls from environment:", urls)
                except json.JSONDecodeError as e:
                    print("Failed to parse JSON:", e)
              else:
                    print("Environment variable not set.")

              for url in urls:
                try:
                    response = requests.get(url, stream=True)
                    response.raise_for_status()

                    parsed_url = urlparse(url)
                    object_name = os.path.basename(parsed_url.path)
                    print("filename:", object_name)
                    temp_file_descriptor, temp_file_path = tempfile.mkstemp()
                    try:
                        with open(temp_file_path, 'wb') as temp_file:
                            for chunk in response.iter_content(chunk_size=8192):
                                temp_file.write(chunk)
                        
                        print(f"Temporary file name: {temp_file_path}")
                        minioClient.fput_object(
                            bucket,
                            object_name,
                            temp_file_path
                        )
                        print(f"Successfully uploaded {object_name} to {bucket}/{object_name}")
                    except Exception as err:
                        print(f"Error processing file: {err}")
                    finally:
                        os.close(temp_file_descriptor)
                        os.remove(temp_file_path)

                except Exception as err:
                    print(f"Error fetching file: {err}")
                    
              EOF
          command:
            - /bin/bash
          envFrom:
            - secretRef:
                name: minio
          env:
            - name: MINIO_BUCKET
              value: {{ .Values.sampleFileUpload.bucket }}
            - name: URLS
              value: '{{ .Values.sampleFileUpload.urls | toJson }}'
          image: registry.access.redhat.com/ubi9/python-39
          imagePullPolicy: IfNotPresent
          name: create-buckets
      initContainers:
        - name: wait-for-minio
          image: "image-registry.openshift-image-registry.svc:5000/openshift/tools:latest"
          command:
            - /bin/bash
            - -c
            - |
              set -e
              url="http://{{ .Values.secret.host }}:{{ .Values.secret.port }}/minio/health/live"
              echo "Waiting for $url..."
              until curl -ksf "$url"; do
                echo "Still waiting for $url ..."
                sleep 10
              done
              echo "\nMinio is running."
      restartPolicy: Never
{{- end }}